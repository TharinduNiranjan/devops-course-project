default:
  tags:
    - dcthra

stages:
  - build
  - test
  - sonarqube-check
  - aws-image-push
  - deploy
  - deploy-aws
  
build:
  stage: build
  script:
    - docker-compose build

test:
  stage: test
  image: python:3.9-alpine
  script:
    # - docker-compose run --rm api_gateway_service python -m unittest discover /app -v
    - pip install coverage requests flask && coverage run -m unittest discover -s tests -v && coverage xml


sonarqube-check:
  stage: sonarqube-check
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
    GIT_DEPTH: "0"  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner -Dsonar.projectKey=api_service -Dsonar.coverage.jacoco.xmlReportPaths=coverage.xml -Dsonar.projectName=api_service -Dsonar.sources=api_gateway_service -Dsonar.tests=tests -Dsonar.host.url=http://localhost:9000 -Dsonar.login=squ_c2f8edf892d2897eaea2036d6b88cdee9fc03993 
  allow_failure: true
  only:
    - project 

aws-image-push:
  stage: aws-image-push
  variables:
    CI_AWS_ACCESS_KEY_ID: $CI_AWS_ACCESS_KEY_ID
    CI_AWS_SECRET_ACCESS_KEY: $CI_AWS_SECRET_ACCESS_KEY
    CI_AWS_DEFAULT_REGION: $CI_AWS_DEFAULT_REGION
    ECR_REPO_URL: $ECR_REPO_URL
  before_script:
    - apk add --no-cache curl jq python3 py-pip
    - python3 -m venv /path/to/venv
    - . /path/to/venv/bin/activate
    - pip install awscli 
    - aws configure set aws_access_key_id $CI_AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $CI_AWS_SECRET_ACCESS_KEY
    - aws configure set region $CI_AWS_DEFAULT_REGION
    - aws ecr get-login-password --region $CI_AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL

  script:
    -  |-
            for image in service1 service2 monitoring_service api_gateway_service; do
                docker tag $image:latest $ECR_REPO_URL/$image:latest
                docker push $ECR_REPO_URL/$image:lates
            done

deploy:
  stage: deploy
  script:
    - docker-compose up -d

deploy-aws:
  tags:
    - dcthra-aws
  stage: deploy
  script:
    - docker-compose up -d